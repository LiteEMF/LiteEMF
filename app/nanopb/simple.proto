// A very simple protocol definition, consisting of only
// one message.

syntax = "proto3";

import "nanopb.proto";
// package simple;     // 逻辑包名, 类似C++命名空间

message student_t
{
    reserved 2, 15;         //保留字段号,用于协议更新的时候删除这个段号不再使用
    reserved "foo", "bar";  //保留字段名,用于协议更新的时候删除这个名称不再使用

    //reserved id 1 3 4
    uint32 id                   = 5;           
    string name                 = 6  [(nanopb).max_length = 4];
    //reserved
    bytes array8                = 9  [(nanopb).max_size = 4];           //pb_size_t size; pb_byte_t bytes[n];
    bytes fix_array8            = 10 [(nanopb).max_size = 4,(nanopb).fixed_length = true]; //pb_byte_t fix_array8[16];
    repeated uint32 array32     = 11 [(nanopb).max_count = 4];           //pb_size_t array32_count; uint32_t array32[5];
    repeated uint32 fix_array32 = 12 [(nanopb).max_count = 4,(nanopb).fixed_count = true];  //uint32_t fix_array32[5];
    string str                  = 13 [(nanopb).max_length = 8];        //char str[41];
}

message teacher_t
{
    //reservedid 1 3 4
    uint32 id                   = 5;           
    //reserved
    bytes array8                = 9  [(nanopb).max_size = 4];           //pb_size_t size; pb_byte_t bytes[n];
    bytes fix_array8            = 10 [(nanopb).max_size = 4,(nanopb).fixed_length = true]; //pb_byte_t fix_array8[16];
    repeated uint32 array32     = 11 [(nanopb).max_count = 4];           //pb_size_t array32_count; uint32_t array32[5];
    repeated uint32 fix_array32 = 12 [(nanopb).max_count = 4,(nanopb).fixed_count = true];  //uint32_t fix_array32[5];
    string str                  = 13 [(nanopb).max_length = 8];        //char str[41]; 
}

message person_t
{
    repeated student_t student = 2 [(nanopb).max_count = 2];   //pb_size_t sutdent_count;simple_student_t sutdent[16];
    teacher_t teacher = 3 ;
}

// example key-value 
// message key
// {
//     map<int32, string> id = 1;
//     map<int32, string> attrs = 3;
// }